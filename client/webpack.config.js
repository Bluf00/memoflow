const HtmlWebpackPlugin = require('html-webpack-plugin');
const WebpackPwaManifest = require('webpack-pwa-manifest');
const { InjectManifest } = require('workbox-webpack-plugin');
const path = require('path');

module.exports = () => {
  return {
    mode: 'development',  // Set mode to development; change to 'production' for production builds.
    entry: {
      main: './src/js/index.js',    // Entry point for your main JavaScript file.
      install: './src/js/install.js' // Entry point for your install script.
    },
    output: {
      filename: '[name].bundle.js',   // Outputs a unique bundle for each entry point.
      path: path.resolve(__dirname, 'dist'), // Output directory.
      clean: true, // Cleans the output directory before every build.
    },
    plugins: [
      // Generates the index.html file and injects the bundles.
      new HtmlWebpackPlugin({
        template: './index.html',  
        title: 'Progressive Web App', 
      }),
      
      // Injects the service worker generated by Workbox
      new InjectManifest({
        swSrc: './src-sw.js',   
        swDest: 'service-worker.js',  
      }),
      
      // Generates a manifest.json file for your PWA
      new WebpackPwaManifest({
        name: 'My Progressive Web App',
        short_name: 'PWA',
        description: 'My awesome Progressive Web App!',
        background_color: '#ffffff',
        theme_color: '#317EFB',
        start_url: './',
        publicPath: './', 
        icons: [
          {
            src: path.resolve('src/images/logo.png'),  
            sizes: [96, 128, 192, 256, 384, 512], 
            destination: path.join('assets', 'icons'),
          },
        ],
      }),
    ],
    module: {
      rules: [
        // CSS Loaders
        {
          test: /\.css$/,  
          use: ['style-loader', 'css-loader'], 
        },

        // Babel Loader
        {
          test: /\.js$/,   
          exclude: /node_modules/, 
          use: {
            loader: 'babel-loader',  
            options: {
              presets: ['@babel/preset-env'], 
            },
          },
        },
      ],
    },
    devtool: 'source-map',  
  };
};
